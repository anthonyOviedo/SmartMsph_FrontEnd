import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, HostListener, ViewEncapsulation } from '@angular/core';
import { FormGroup, FormControl } from '@angular/forms';
import { defaultDateRangePickerOptions } from '../../constants';
import * as momentNs from 'moment';
var moment = momentNs;
var instanceCount = 0;
var DateRangePickerComponent = /** @class */ (function () {
    function DateRangePickerComponent() {
        this.options = defaultDateRangePickerOptions;
        this.controlName = 'dateRange';
        this.instanceId = null;
        this.fromDate = null;
        this.toDate = null;
        this.rangeSelected = new EventEmitter();
        this.range = '';
        this.showCalendars = false;
        if (!this.instanceId) {
            // assign auto-id
            this.instanceId = "dateRangePicker-" + instanceCount++;
        }
    }
    Object.defineProperty(DateRangePickerComponent.prototype, "enableApplyButton", {
        get: function () {
            return !this.options.autoApply && !this.options.singleCalendar && this.fromDate !== null && this.toDate !== null;
        },
        enumerable: true,
        configurable: true
    });
    DateRangePickerComponent.prototype.handleClick = function (event) {
        var target = event.target;
        // close the DatePicker if clicking outside is not allowed
        if (!this.options.clickOutsideAllowed) {
            var containerElementClassRoot_1 = 'dateRangePicker';
            var targetPathClassNames = event['path'].map(function (obj) { return obj.className; }) || [''];
            var targetExistsInPath = targetPathClassNames.some(function (className) {
                if (typeof className === 'string') {
                    return className && className.includes(containerElementClassRoot_1);
                }
                return false;
            });
            if (!targetExistsInPath) {
                this.toggleCalendarVisibility(false);
            }
        }
        // Close the DatePicker if the target input was clicked
        if (target.id === this.instanceId) {
            this.toggleCalendarVisibility(!this.showCalendars);
        }
    };
    DateRangePickerComponent.prototype.ngOnInit = function () {
        var _this = this;
        // ensure dates in options are valid
        this.validateOptionDates();
        // ensure input dates are within the min/max dates in options
        this.validateInputDates();
        if (this.options.preDefinedRanges && this.options.preDefinedRanges.length > 0) {
            this.defaultRanges = this.validateAndAssignPredefinedRanges(this.options.preDefinedRanges);
        }
        // assign values not present in options with default values
        var optionsKeys = Object.keys(this.options);
        var defaultValuesKeys = Object.keys(defaultDateRangePickerOptions);
        defaultValuesKeys.forEach(function (key) {
            if (!optionsKeys.includes(key)) {
                _this.options[key] = defaultDateRangePickerOptions[key];
            }
        });
        // update calendar grid
        this.updateCalendar();
        // create parent form group if it doesn't exist
        if (!this.parentFormGroup) {
            this.parentFormGroup = new FormGroup({});
        }
        // add form control to parent form group
        var value = this.formatRangeAsString();
        var control = new FormControl(value, this.options.validators);
        if (this.options.disabled) {
            control.disable();
        }
        this.parentFormGroup.addControl(this.controlName, control);
        // set value of control
        this.setRange();
    };
    DateRangePickerComponent.prototype.validateInputDates = function () {
        if (this.fromDate && this.options.minDate && this.fromDate.isBefore(this.options.minDate, 'date')) {
            throw new RangeError('@Input fromDate is before the specified minDate in options');
        }
        if (this.toDate && this.options.maxDate && this.toDate.isAfter(this.options.maxDate, 'date')) {
            throw new RangeError('@Input toDate is after the specified maxDate in options');
        }
    };
    DateRangePickerComponent.prototype.validateOptionDates = function () {
        // validate maxDate isn't before minDate or vice versa
        if (this.options) {
            if (this.options.minDate && this.options.maxDate) {
                if (this.options.minDate.isAfter(this.options.maxDate, 'date')) {
                    throw new RangeError('minDate specified in options is after the maxDate');
                }
                else if (this.options.maxDate.isBefore(this.options.minDate, 'date')) {
                    throw new RangeError('maxDate specified in options is before the minDate');
                }
            }
        }
    };
    // assists CSS to fix small positioning bug with From:/To: date text
    DateRangePickerComponent.prototype.checkChrome = function () {
        return window['chrome'] ? 'is-chrome' : '';
    };
    DateRangePickerComponent.prototype.toggleCalendarVisibility = function (value) {
        this.showCalendars = value !== null ? value : !this.showCalendars;
    };
    DateRangePickerComponent.prototype.setFromToMonthYear = function (fromDate, toDate) {
        var tempFromDate = fromDate || this.fromDate || this.options.startingFromDate || moment();
        var tempToDate = toDate || this.toDate || this.options.startingToDate || moment();
        this.fromMonth = tempFromDate.get('month');
        this.fromYear = tempFromDate.get('year');
        this.toMonth = tempToDate.get('month');
        this.toYear = tempToDate.get('year');
    };
    DateRangePickerComponent.prototype.updateCalendar = function () {
        // get month and year to show calendar
        this.setFromToMonthYear();
        this.setRange();
    };
    // update from/to based on selection
    DateRangePickerComponent.prototype.dateChanged = function (changedData) {
        var value = changedData.day;
        var isLeft = changedData.isLeft;
        if (isLeft) {
            this.fromDate = value;
            if (this.fromDate.isAfter(this.toDate, 'date')) {
                this.toDate = this.fromDate.clone();
            }
        }
        else {
            this.toDate = value;
            if (this.toDate.isBefore(this.fromDate, 'date')) {
                this.fromDate = this.toDate.clone();
            }
        }
        this.setFromToMonthYear(this.fromDate, this.toDate);
        if (this.isAutoApply() && (this.options.singleCalendar || !isLeft) && this.fromDate) {
            this.toggleCalendarVisibility(false);
            this.setRange();
            this.emitRangeSelected();
        }
    };
    DateRangePickerComponent.prototype.emitRangeSelected = function (data) {
        if (!data) {
            data = this.options.singleCalendar ? { start: this.fromDate } : { start: this.fromDate, end: this.toDate };
        }
        this.rangeSelected.emit(data);
    };
    DateRangePickerComponent.prototype.getMoment = function (value) {
        return moment(value, this.options.format);
    };
    DateRangePickerComponent.prototype.formatRangeAsString = function () {
        var range = '';
        if (this.options.singleCalendar && this.fromDate) {
            range = this.fromDate.format(this.options.format);
        }
        else if (!this.options.singleCalendar && this.fromDate && this.toDate) {
            range = this.fromDate.format(this.options.format) + " - " + this.toDate.format(this.options.format);
        }
        return range;
    };
    DateRangePickerComponent.prototype.setRange = function () {
        this.range = this.formatRangeAsString();
        if (this.parentFormGroup) {
            var control = this.parentFormGroup.get(this.controlName);
            if (control) {
                control.setValue(this.range);
                control.updateValueAndValidity();
            }
        }
    };
    DateRangePickerComponent.prototype.setDateFromInput = function (event, isLeft) {
        if (isLeft === void 0) { isLeft = false; }
        var target = event.target;
        try {
            if (target.value) {
                var day = this.getMoment(target.value);
                if (!day.isBefore(this.options.minDate) && !day.isAfter(this.options.maxDate)) {
                    if (isLeft && !this.fromDate) {
                        this.fromDate = day;
                    }
                    if (!isLeft && !this.toDate) {
                        this.toDate = day;
                    }
                    this.dateChanged({
                        day: day,
                        isLeft: isLeft,
                    });
                    this.setFromToMonthYear(this.fromDate, this.toDate);
                }
                else {
                    // assume nothing - reset values
                    this.fromDate = null;
                    this.toDate = null;
                    target.value = '';
                    target.focus();
                }
            }
            this.emitRangeSelected();
        }
        catch (e) {
            console.error(e);
        }
    };
    DateRangePickerComponent.prototype.monthChanged = function (data) {
        var temp;
        if (data.isLeft) {
            temp = moment([this.fromYear, this.fromMonth]).add(data.value, 'months');
            this.fromMonth = temp.get('month');
            this.fromYear = temp.get('year');
        }
        else {
            temp = moment([this.toYear, this.toMonth]).add(data.value, 'months');
            this.toMonth = temp.get('month');
            this.toYear = temp.get('year');
        }
    };
    DateRangePickerComponent.prototype.yearChanged = function (data) {
        var temp;
        if (data.isLeft) {
            temp = moment([this.fromYear, this.fromMonth]).add(data.value, 'year');
            this.fromMonth = temp.get('month');
            this.fromYear = temp.get('year');
        }
        else {
            temp = moment([this.toYear, this.toMonth]).add(data.value, 'year');
            this.toMonth = temp.get('month');
            this.toYear = temp.get('year');
        }
    };
    DateRangePickerComponent.prototype.close = function (event) {
        this.toggleCalendarVisibility(false);
        event.stopPropagation();
    };
    DateRangePickerComponent.prototype.reset = function (event) {
        this.fromDate = null;
        this.toDate = null;
        this.setRange();
        event.stopPropagation();
    };
    DateRangePickerComponent.prototype.apply = function (event) {
        this.toggleCalendarVisibility(false);
        this.setRange();
        this.emitRangeSelected();
        event.stopPropagation();
    };
    DateRangePickerComponent.prototype.applyPredefinedRange = function (event, definedDateRange) {
        // adjust to/from month/year so calendar months and years match range
        this.setFromToMonthYear(definedDateRange.value.start, definedDateRange.value.end);
        this.fromDate = definedDateRange.value.start;
        this.toDate = definedDateRange.value.end;
        if (this.options.autoApply) {
            this.apply(event);
        }
    };
    DateRangePickerComponent.prototype.validateAndAssignPredefinedRanges = function (ranges) {
        var _this = this;
        return ranges.filter(function (range) {
            if (range.value.start.isAfter(range.value.end, 'date')) {
                throw new RangeError("Pre-defined range \"" + range.name + "\" start date cannot be after the end date for the range.");
            }
            if (_this.options.minDate && range.value.start.isBefore(_this.options.minDate)) {
                throw new RangeError("Pre-defined range \"" + range.name + "\" start date is before the specified minDate in your options.");
            }
            if (_this.options.maxDate && range.value.end.isAfter(_this.options.maxDate)) {
                throw new RangeError("Pre-defined range \"" + range.name + "\" end date is after the specified maxDate in your options.");
            }
            // add range to ranges
            return true;
        });
    };
    DateRangePickerComponent.prototype.isAutoApply = function () {
        if (this.options.singleCalendar) {
            return true;
        }
        else {
            return this.options.autoApply;
        }
    };
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "options", void 0);
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "controlName", void 0);
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "instanceId", void 0);
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "parentFormGroup", void 0);
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "fromDate", void 0);
    tslib_1.__decorate([
        Input()
    ], DateRangePickerComponent.prototype, "toDate", void 0);
    tslib_1.__decorate([
        Output()
    ], DateRangePickerComponent.prototype, "rangeSelected", void 0);
    tslib_1.__decorate([
        HostListener('document:click', ['$event'])
    ], DateRangePickerComponent.prototype, "handleClick", null);
    DateRangePickerComponent = tslib_1.__decorate([
        Component({
            encapsulation: ViewEncapsulation.None,
            selector: 'date-range-picker',
            template: "<div class=\"dateRangePicker-wrapper\" *ngIf=\"parentFormGroup\">\n  <div #content>\n    <ng-content></ng-content>\n  </div>\n  <div class=\"form-group\" [formGroup]=\"parentFormGroup\">\n    <ng-container *ngIf=\"content.childNodes.length === 0\">\n      <label [attr.for]=\"instanceId\">{{ options.labelText }}</label>\n      <input [attr.id]=\"instanceId\" class=\"form-control\" type=\"text\" [formControlName]=\"controlName\">\n    </ng-container>\n\n    <div [ngClass]=\"{'dateRangePicker': true, 'invisible': !showCalendars, 'dateRangePicker-single': options.singleCalendar, 'is-chrome': checkChrome(), 'open-left': options.position === 'left', 'open-right': options.position === 'right' }\">\n      <div class=\"container-fluid\">\n        <div class=\"row\">\n          <div class=\"col\">\n\n            <div class=\"row form-inputs mb-0\" *ngIf=\"!options.singleCalendar\">\n\n              <div class=\"col\">\n                <div class=\"\" *ngIf=\"options.icons !== 'default'\">\n                  <div [ngClass]=\"{ 'd-flex align-items-center input-with-icon': true, 'material': options.icons === 'material'}\">\n                    <i *ngIf=\"options.icons === 'material'\" class=\"material-icons\">event</i>\n                    <i *ngIf=\"options.icons === 'font-awesome'\" class=\"far fa-calendar-alt\"></i>\n                    <span *ngIf=\"fromDate\">From:&nbsp;</span>\n                    <input class=\"form-control\" [ngModel]=\"fromDate | formatMomentDate: options.format\" (blur)=\"setDateFromInput($event, true)\" type=\"text\" name=\"daterangepicker_start\" [ngModelOptions]=\"{ standalone: true }\" placeholder=\"Select From Date\" />\n                  </div>\n                </div>\n\n                <input *ngIf=\"options.icons === 'default'\" class=\"form-control\" [ngModel]=\"fromDate | formatMomentDate: options.format\" (blur)=\"setDateFromInput($event, true)\" type=\"text\" name=\"daterangepicker_start\" [ngModelOptions]=\"{standalone: true}\" placeholder=\"Select From Date\" />\n              </div>\n\n              <div class=\"col\">\n                <div class=\"\" *ngIf=\"options.icons !== 'default'\">\n                    <div [ngClass]=\"{ 'd-flex align-items-center input-with-icon': true, 'material': options.icons === 'material'}\">\n                      <i *ngIf=\"options.icons === 'material'\" class=\"material-icons\">event</i>\n                      <i *ngIf=\"options.icons === 'font-awesome'\" class=\"far fa-calendar-alt\"></i>\n                      <span *ngIf=\"toDate\">To:&nbsp;</span>\n                      <input class=\"form-control\" [ngModel]=\"toDate | formatMomentDate: options.format\" (blur)=\"setDateFromInput($event)\" type=\"text\" name=\"daterangepicker_end\" [ngModelOptions]=\"{ standalone: true }\" placeholder=\"Select To Date\" />\n                    </div>\n                  </div>\n\n                <input *ngIf=\"options.icons === 'default'\" class=\"form-control\" [ngModel]=\"toDate | formatMomentDate: options.format\" (blur)=\"setDateFromInput($event)\" name=\"daterangepicker_end\" [ngModelOptions]=\"{standalone: true}\" />\n              </div>\n\n            </div>\n\n            <div class=\"row row-calendars\">\n              <div class=\"col\">\n                <calendar [ngClass]=\"{ 'calendar': true, 'calendar-single': options.singleCalendar }\" [isLeft]=\"true\" [month]=\"fromMonth\" [year]=\"fromYear\" (monthChanged)=monthChanged($event)\n                  (yearChanged)=\"yearChanged($event)\" (dateChanged)=\"dateChanged($event)\" [format]=\"options.format\" [selectedFromDate]=\"fromDate\"\n                  [selectedToDate]=\"toDate\" [minDate]=\"options.minDate\" [maxDate]=\"options.maxDate\" [singleCalendar]=\"options.singleCalendar\" [icons]=\"options.icons\"></calendar>\n              </div>\n\n              <div class=\"col\" *ngIf=\"!options.singleCalendar\">\n                <calendar class=\"calendar\" [month]=\"toMonth\" [year]=\"toYear\" [format]=\"options.format\" (dateChanged)=\"dateChanged($event)\" (monthChanged)=\"monthChanged($event)\" (yearChanged)=yearChanged($event) [selectedFromDate]=\"fromDate\" [selectedToDate]=\"toDate\" [minDate]=\"options.minDate\" [maxDate]=\"options.maxDate\" [icons]=\"options.icons\"></calendar>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div class=\"row text-center my-3\" *ngIf=\"!options.singleCalendar\">\n          <div class=\"col\">\n            <div class=\"row mb-2\" *ngIf=\"options.preDefinedRanges && options.preDefinedRanges.length > 0\">\n              <div class=\"col\">\n                <button type=\"button\" *ngFor=\"let range of options.preDefinedRanges\" class=\"btn btn-link\" (click)=\"applyPredefinedRange($event, range)\">{{ range.name }}</button>\n              </div>\n            </div>\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm\" (click)=\"close($event)\">Close</button>\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm ml-3\" (click)=\"reset($event)\" *ngIf=\"this.range\">Reset</button>\n            <button type=\"button\" class=\"btn btn-primary btn-sm ml-3\" [disabled]=\"!enableApplyButton\" (click)=\"apply($event)\" *ngIf=\"!isAutoApply()\">Apply</button>\n          </div>\n        </div>\n\n      </div>\n    </div>\n\n  </div>\n</div>\n",
            styles: [".dateRangePicker-wrapper{position:relative;border:none}.dateRangePicker-wrapper .dateRangePicker{background:#fff;border-radius:9px;box-shadow:0 0 10px 0 rgba(129,139,144,.5);font-family:Roboto,Helvetica,Arial,sans-serif;overflow:visible;position:absolute;top:88px;z-index:3000}.dateRangePicker-wrapper .dateRangePicker.dateRangePicker-single{min-width:300px}@media screen and (min-width:576px){.dateRangePicker-wrapper .dateRangePicker{min-width:600px}}.dateRangePicker-wrapper .dateRangePicker::after,.dateRangePicker-wrapper .dateRangePicker::before{content:\"\";height:0;width:0;border-bottom:10px solid #6e777c;border-left:10px solid transparent;border-right:10px solid transparent;position:absolute;top:-10px}.dateRangePicker-wrapper .dateRangePicker.open-left{left:0}.dateRangePicker-wrapper .dateRangePicker.open-left::before{left:10px}.dateRangePicker-wrapper .dateRangePicker.open-left::after{display:none}.dateRangePicker-wrapper .dateRangePicker.open-right{right:0}.dateRangePicker-wrapper .dateRangePicker.open-right::before{display:none}.dateRangePicker-wrapper .dateRangePicker.open-right::after{right:10px}.dateRangePicker-wrapper .dateRangePicker.is-chrome .form-inputs .input-with-icon span{position:relative;top:1px}.dateRangePicker-wrapper .dateRangePicker .btn,.dateRangePicker-wrapper .dateRangePicker .btn.btn-link{min-width:auto;width:auto}.dateRangePicker-wrapper .dateRangePicker .form-inputs{background-color:#6e777c;border-top-left-radius:8px;border-top-right-radius:8px;color:#fff;font-size:16px}.dateRangePicker-wrapper .dateRangePicker .form-inputs>.col{padding:.5rem 15px;min-width:270px}.dateRangePicker-wrapper .dateRangePicker .form-inputs .input-with-icon{display:flex;align-content:flex-start;align-items:center!important}.dateRangePicker-wrapper .dateRangePicker .form-inputs .input-with-icon i{color:#fff;margin-right:.5rem}.dateRangePicker-wrapper .dateRangePicker .form-inputs .input-with-icon i.material-icons{top:0}.dateRangePicker-wrapper .dateRangePicker .form-inputs .input-with-icon span{line-height:1}.dateRangePicker-wrapper .dateRangePicker .form-inputs .form-control{background:0 0;border:0;color:#fff;display:inline-block;padding:0;width:150px}.dateRangePicker-wrapper .dateRangePicker .form-inputs .form-control::-webkit-input-placeholder{color:#fff}.dateRangePicker-wrapper .dateRangePicker .form-inputs .form-control::-moz-placeholder{color:#fff}.dateRangePicker-wrapper .dateRangePicker .form-inputs .form-control::-ms-input-placeholder{color:#fff}.dateRangePicker-wrapper .dateRangePicker .form-inputs .form-control::placeholder{color:#fff}.dateRangePicker-wrapper .dateRangePicker .form-inputs>div:nth-child(2),.dateRangePicker-wrapper .dateRangePicker .row-calendars>div:nth-child(2){border-left:2px solid #c6d1d6}.dateRangePicker-wrapper i.material-icons{position:relative;top:2px}"]
        })
    ], DateRangePickerComponent);
    return DateRangePickerComponent;
}());
export { DateRangePickerComponent };
//# sourceMappingURL=data:application/json;base64,